@page
@model UniClassReservation.Pages.Admin.Reservations.IndexModel
@inject Microsoft.AspNetCore.Antiforgery.IAntiforgery Xsrf
@{
    ViewData["Title"] = "Reservations";
    var weekStart = Model.WeekStart;
    var weekDays = Enumerable.Range(0, 7).Select(i => weekStart.AddDays(i)).ToList();
    var hours = Enumerable.Range(8, 13).ToList(); // 08:00 - 20:00
}
<h2>Reservations</h2>
<div class="mb-3 d-flex justify-content-between align-items-center">
    <div>
        <form method="get" class="d-inline">
            <input type="hidden" name="week" value="@weekStart.AddDays(-7).ToString("yyyy-MM-dd")" />
            <button type="submit" class="btn btn-outline-primary">Previous</button>
        </form>
        <form method="get" class="d-inline">
            <input type="hidden" name="week" value="@DateTime.Today.AddDays(-(int)DateTime.Today.DayOfWeek).ToString("yyyy-MM-dd")" />
            <button type="submit" class="btn btn-outline-primary">This Week</button>
        </form>
        <form method="get" class="d-inline">
            <input type="hidden" name="week" value="@weekStart.AddDays(7).ToString("yyyy-MM-dd")" />
            <button type="submit" class="btn btn-outline-primary">Next</button>
        </form>
    </div>
</div>
<table class="table table-bordered table-sm text-center align-middle">
    <thead class="table-light">
        <tr>
            <th>Hour</th>
            @foreach (var day in weekDays)
            {
                <th>@day.ToString("dddd dd.MM")</th>
            }
        </tr>
    </thead>
    <tbody>
        @foreach (var hour in hours)
        {
            <tr>
                <td>@($"{hour:D2}:00 - {(hour + 1):D2}:00")</td>
                @foreach (var day in weekDays)
                {
                    var slotStart = new DateTime(day.Year, day.Month, day.Day, hour, 0, 0);
                    var slotEnd = slotStart.AddHours(1);
                    var reservations = Model.Reservations.Where(r => r.StartTime < slotEnd && r.EndTime > slotStart).ToList();
                    var cellClass = reservations.Count > 1 ? "conflict-cell text-white" : "";
                    var isHoliday = Model.Holidays.Any(h => h.StartDate.Date <= day.Date && h.EndDate.Date >= day.Date);
                    if (isHoliday) cellClass += " holiday-cell";
                    <td class="@cellClass">
                        @if (isHoliday)
                        {
                            <div class="badge bg-secondary mb-1">Holiday</div>
                        }
                        @if (reservations.Count > 1)
                        {
                            <strong>Conflict!</strong><br />
                        }
                        @if (reservations.Any())
                        {
                            foreach (var res in reservations)
                            {
                                string badgeClass = res.Status == "Approved" ? "bg-success" : res.Status == "Rejected" ? "bg-danger" : "bg-warning text-dark";
                                string statusText = res.Status == "Approved" ? "Approved" : res.Status == "Rejected" ? "Rejected" : "Waiting for approve";
                                <div class="reservation-badge-wrapper d-inline-block position-relative mb-1">
                                    <div class="badge @badgeClass reservation-badge" style="min-width:110px;white-space:normal;" data-res-id="@res.Id" onclick="showActionMenu(event, @res.Id, '@statusText')">
                                        <b>@res.User?.FirstName @res.User?.LastName</b><br />
                                        @res.Classroom?.Name<br />@res.StartTime.ToString("HH:mm")-@res.EndTime.ToString("HH:mm")<br /><strong>@statusText</strong>
                                    </div>
                                </div>
                            }
                        }
                    </td>
                }
            </tr>
        }
    </tbody>
</table>
<script>
    var weekStart = '@Model.WeekStart.ToString("yyyy-MM-dd")';
    var antiForgeryToken = '@Xsrf.GetAndStoreTokens(HttpContext).RequestToken';
</script>
@section Scripts {
    <script>
        function showActionMenu(e, resId, status) {
            // Remove any existing menu
            document.querySelectorAll('.reservation-action-menu').forEach(m => m.remove());
            if (status !== 'Waiting for approve') return;
            // Create menu
            var menu = document.createElement('div');
            menu.className = 'reservation-action-menu position-absolute bg-white border rounded shadow p-2';
            menu.style.zIndex = 1000;
            menu.innerHTML = `
                <form method='post' style='display:inline'>
                    <input type='hidden' name='ReservationId' value='${resId}' />
                    <input type='hidden' name='ActionType' value='approve' />
                    <input type='hidden' name='__RequestVerificationToken' value='${antiForgeryToken}' />
                    <button type='submit' class='btn btn-sm btn-success mb-1 w-100'>Approve</button>
                </form>
                <form method='post' style='display:inline'>
                    <input type='hidden' name='ReservationId' value='${resId}' />
                    <input type='hidden' name='ActionType' value='reject' />
                    <input type='hidden' name='__RequestVerificationToken' value='${antiForgeryToken}' />
                    <button type='submit' class='btn btn-sm btn-danger w-100'>Reject</button>
                </form>
            `;
            // Position menu
            var rect = e.target.getBoundingClientRect();
            menu.style.left = (e.target.offsetLeft + 120) + 'px';
            menu.style.top = (e.target.offsetTop) + 'px';
            e.target.parentElement.appendChild(menu);
            // Close on click outside
            setTimeout(() => {
                document.addEventListener('click', function handler(ev) {
                    if (!menu.contains(ev.target)) {
                        menu.remove();
                        document.removeEventListener('click', handler);
                    }
                });
            }, 100);
        }
    </script>
}
@section Styles {
    <style>
        .conflict-cell {
            background-color: #ff6666 !important;
        }
        .holiday-cell {
            background-color: #e0e0e0 !important;
        }
        .reservation-badge-wrapper {
            position: relative;
        }
        .reservation-badge {
            cursor: pointer;
            transition: box-shadow 0.2s;
        }
        .reservation-badge-wrapper:hover .reservation-badge {
            box-shadow: 0 2px 12px rgba(0,0,0,0.15);
        }
        .reservation-action-menu {
            min-width: 120px;
            box-shadow: 0 2px 12px rgba(0,0,0,0.15);
        }
    </style>
} 